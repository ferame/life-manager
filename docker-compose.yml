version: '3.8'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: life-manager-rest # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - 8080:8080 # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    command: java -Djava.security.egd=file:/dev/./urandom -jar /project/target/demo-0.0.1-SNAPSHOT.jar
    links:
      - redis
    environment:
      redis_server_addr: redis
    depends_on:
      - redis
#    depends_on:
#      - db # This service depends on mysql. Start that first.
#    environment: # Pass environment variables to the service
#      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/polls?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
#      SPRING_DATASOURCE_USERNAME: callicoder
#      SPRING_DATASOURCE_PASSWORD: callicoder
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend

  # App caching service
  redis:
    image: redis:latest
    hostname: redis
    networks:
      - backend
    ports:
      - 6379:6379

  # Frontend Service
  app-client:
    build:
      context: life-manager-web # Use an image built from the specified dockerfile in the `polling-app-client` directory.
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://127.0.0.1:8080/api
    ports:
      - 9090:80 # Forward the exposed port 80 on the container to port 80 on the host machine
    restart: always
    depends_on:
      - app-server
    networks:
      - frontend

  # Database Service (Mysql)
#  db:
#    image: mysql:5.7
#    ports:
#      - "3306:3306"
#    restart: always
#    environment:
#      MYSQL_DATABASE: polls
#      MYSQL_USER: callicoder
#      MYSQL_PASSWORD: callicoder
#      MYSQL_ROOT_PASSWORD: root
#    volumes:
#      - db-data:/var/lib/mysql
#    networks:
#      - backend

# Volumes
volumes:
  db-data:

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:
